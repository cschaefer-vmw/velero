// Code generated by mockery (devel). DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	velero "github.com/vmware-tanzu/velero/pkg/plugin/velero"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// CleanupClients provides a mock function with given fields:
func (_m *Manager) CleanupClients() {
	_m.Called()
}

// GetBackupItemAction provides a mock function with given fields: name
func (_m *Manager) GetBackupItemAction(name string) (velero.BackupItemAction, error) {
	ret := _m.Called(name)

	var r0 velero.BackupItemAction
	if rf, ok := ret.Get(0).(func(string) velero.BackupItemAction); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(velero.BackupItemAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackupItemActions provides a mock function with given fields:
func (_m *Manager) GetBackupItemActions() ([]velero.BackupItemAction, error) {
	ret := _m.Called()

	var r0 []velero.BackupItemAction
	if rf, ok := ret.Get(0).(func() []velero.BackupItemAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]velero.BackupItemAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeleteItemAction provides a mock function with given fields: name
func (_m *Manager) GetDeleteItemAction(name string) (velero.DeleteItemAction, error) {
	ret := _m.Called(name)

	var r0 velero.DeleteItemAction
	if rf, ok := ret.Get(0).(func(string) velero.DeleteItemAction); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(velero.DeleteItemAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeleteItemActions provides a mock function with given fields:
func (_m *Manager) GetDeleteItemActions() ([]velero.DeleteItemAction, error) {
	ret := _m.Called()

	var r0 []velero.DeleteItemAction
	if rf, ok := ret.Get(0).(func() []velero.DeleteItemAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]velero.DeleteItemAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectStore provides a mock function with given fields: name
func (_m *Manager) GetObjectStore(name string) (velero.ObjectStore, error) {
	ret := _m.Called(name)

	var r0 velero.ObjectStore
	if rf, ok := ret.Get(0).(func(string) velero.ObjectStore); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(velero.ObjectStore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreBackupAction provides a mock function with given fields: name
func (_m *Manager) GetPreBackupAction(name string) (velero.PreBackupAction, error) {
	ret := _m.Called(name)

	var r0 velero.PreBackupAction
	if rf, ok := ret.Get(0).(func(string) velero.PreBackupAction); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(velero.PreBackupAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreBackupActions provides a mock function with given fields:
func (_m *Manager) GetPreBackupActions() ([]velero.PreBackupAction, error) {
	ret := _m.Called()

	var r0 []velero.PreBackupAction
	if rf, ok := ret.Get(0).(func() []velero.PreBackupAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]velero.PreBackupAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostBackupAction provides a mock function with given fields: name
func (_m *Manager) GetPostBackupAction(name string) (velero.PostBackupAction, error) {
	ret := _m.Called(name)

	var r0 velero.PostBackupAction
	if rf, ok := ret.Get(0).(func(string) velero.PostBackupAction); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(velero.PostBackupAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostBackupActions provides a mock function with given fields:
func (_m *Manager) GetPostBackupActions() ([]velero.PostBackupAction, error) {
	ret := _m.Called()

	var r0 []velero.PostBackupAction
	if rf, ok := ret.Get(0).(func() []velero.PostBackupAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]velero.PostBackupAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestoreItemAction provides a mock function with given fields: name
func (_m *Manager) GetRestoreItemAction(name string) (velero.RestoreItemAction, error) {
	ret := _m.Called(name)

	var r0 velero.RestoreItemAction
	if rf, ok := ret.Get(0).(func(string) velero.RestoreItemAction); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(velero.RestoreItemAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestoreItemActions provides a mock function with given fields:
func (_m *Manager) GetRestoreItemActions() ([]velero.RestoreItemAction, error) {
	ret := _m.Called()

	var r0 []velero.RestoreItemAction
	if rf, ok := ret.Get(0).(func() []velero.RestoreItemAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]velero.RestoreItemAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreRestoreAction provides a mock function with given fields: name
func (_m *Manager) GetPreRestoreAction(name string) (velero.PreRestoreAction, error) {
	ret := _m.Called(name)

	var r0 velero.PreRestoreAction
	if rf, ok := ret.Get(0).(func(string) velero.PreRestoreAction); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(velero.PreRestoreAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreRestoreActions provides a mock function with given fields:
func (_m *Manager) GetPreRestoreActions() ([]velero.PreRestoreAction, error) {
	ret := _m.Called()

	var r0 []velero.PreRestoreAction
	if rf, ok := ret.Get(0).(func() []velero.PreRestoreAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]velero.PreRestoreAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostRestoreAction provides a mock function with given fields: name
func (_m *Manager) GetPostRestoreAction(name string) (velero.PostRestoreAction, error) {
	ret := _m.Called(name)

	var r0 velero.PostRestoreAction
	if rf, ok := ret.Get(0).(func(string) velero.PostRestoreAction); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(velero.PostRestoreAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostRestoreActions provides a mock function with given fields:
func (_m *Manager) GetPostRestoreActions() ([]velero.PostRestoreAction, error) {
	ret := _m.Called()

	var r0 []velero.PostRestoreAction
	if rf, ok := ret.Get(0).(func() []velero.PostRestoreAction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]velero.PostRestoreAction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeSnapshotter provides a mock function with given fields: name
func (_m *Manager) GetVolumeSnapshotter(name string) (velero.VolumeSnapshotter, error) {
	ret := _m.Called(name)

	var r0 velero.VolumeSnapshotter
	if rf, ok := ret.Get(0).(func(string) velero.VolumeSnapshotter); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(velero.VolumeSnapshotter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
